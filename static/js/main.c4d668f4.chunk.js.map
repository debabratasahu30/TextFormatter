{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleHandler","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","textForm","setTextForm","style","color","titleform","backgroundColor","onChange","event","target","value","rows","disabled","length","upperText","toUpperCase","showAlertHandler","lowerCase","toLowerCase","newLowertext","charAt","slice","copyText","document","getElementById","select","navigator","clipboard","writeText","newText","split","newValue","join","filter","element","Alert","height","alertMsg","typ","word","capitalize","msg","App","setMode","_useState3","_useState4","alert","setAlert","showAlert","message","setTimeout","Fragment","Navbar_Navbar","body","Components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c4d668f4.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport  \"./Navbar.css\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">\r\n                  About us\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleHandler} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const textUppercaseHandler = () => {\r\n    // console.log(\"Clicked Upper case\");\r\n    let upperText = textForm.toUpperCase();\r\n    setTextForm(upperText);\r\n    if (upperText === \"\") {\r\n      props.showAlertHandler(\"Please enter text in textbox!\", \"danger\");\r\n    } else {\r\n      props.showAlertHandler(\"Conerted to uppercase!\", \"success\");\r\n    }\r\n  };\r\n  const textLowercaseHandler = () => {\r\n    // console.log(\"Clicked Upper case\");\r\n    let upperText = textForm.toLowerCase();\r\n    setTextForm(upperText);\r\n    if (upperText === \"\") {\r\n      props.showAlertHandler(\"Please enter text in textbox!\", \"danger\");\r\n    } else {\r\n      props.showAlertHandler(\"Conerted to lowercase!\", \"success\");\r\n    }\r\n  };\r\n  //Clear text\r\n  const textClearHandler = () => {\r\n    let clearText = \"\";\r\n    setTextForm(clearText);\r\n    if (clearText === \"\") {\r\n      props.showAlertHandler(\"Please enter text in textbox!\", \"danger\");\r\n    } else {\r\n      props.showAlertHandler(\"Cleared text from box\", \"danger\");\r\n    }\r\n  };\r\n  //Copy Text\r\n  const textCopyHandler = () => {\r\n    let copyText = document.getElementById(\"textform\");\r\n    copyText.select();\r\n    navigator.clipboard.writeText(copyText.value);\r\n    copyText.value === \"\"\r\n      ? props.showAlertHandler(\"Please enter text in textbox!\", \"danger\")\r\n      : props.showAlertHandler(\"Copied to Clipboard\", \"success\");\r\n  };\r\n  //Handle Extra Space\r\n  const handleExtraSpace = () => {\r\n    let newText = textForm.split(/[ ]+/);\r\n    let newValue = newText.join(\" \");\r\n    setTextForm(newText.join(\" \"));\r\n    if (newValue === \"\") {\r\n      props.showAlertHandler(\"Please enter text in textbox!\", \"danger\");\r\n    } else {\r\n      props.showAlertHandler(\"Extraspaces removed\", \"success\");\r\n    }\r\n  };\r\n  //Case Sensitive\r\n  const textCapitalizeCaseHandler = () => {\r\n    const lowerCase = textForm.toLowerCase();\r\n    const newLowertext = lowerCase.charAt(0).toUpperCase() + lowerCase.slice(1);\r\n\r\n    setTextForm(newLowertext);\r\n    if (newLowertext === \"\" || newLowertext === null) {\r\n      props.showAlertHandler(\"Please enter text in textbox!\", \"danger\");\r\n    } else {\r\n      props.showAlertHandler(\"Capitalized succesfully!\", \"success\");\r\n    }\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Change Handled\");\r\n    setTextForm(event.target.value);\r\n  };\r\n  const [textForm, setTextForm] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h4\r\n              className=\"my-2 text-center\"\r\n              style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n            >\r\n              {props.titleform}\r\n            </h4>\r\n            <hr />\r\n            <div className=\"mb-3\">\r\n              <textarea\r\n                className=\"form-control\"\r\n                id=\"textform\"\r\n                style={{\r\n                  backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\r\n                  color: props.mode === \"light\" ? \"white\" : \"black\",\r\n                }}\r\n                onChange={handleOnChange}\r\n                rows=\"6\"\r\n                value={textForm}\r\n              ></textarea>\r\n            </div>\r\n            <button disabled={textForm.length===0} className=\"btn btn-primary my-1\" onClick={textUppercaseHandler}>\r\n              Convert to UpperCase\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button disabled={textForm.length===0}\r\n              className=\"btn btn-primary my-1\"\r\n              onClick={textCapitalizeCaseHandler}\r\n            >\r\n              Cpaitalize\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button disabled={textForm.length===0} className=\"btn btn-primary my-1\" onClick={textLowercaseHandler}>\r\n              Convert to LowerCase\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button disabled={textForm.length===0} className=\"btn btn-primary my-1\" onClick={textCopyHandler}>\r\n              Copy to Clipboard\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button disabled={textForm.length===0} className=\"btn btn-danger my-1\" onClick={handleExtraSpace}>\r\n              Remove Extra Space\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button disabled={textForm.length===0} className=\"btn btn-danger my-1\" onClick={textClearHandler}>\r\n              Clear Text\r\n            </button>\r\n            <div className=\"text-container my-3\">\r\n              <h6 style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n                Your Text Summary\r\n              </h6>\r\n              <p style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n             {textForm.split(\" \").filter((element)=>{return element.length !==0}).length} Words and {textForm.length}{\" \"}\r\n                Characters\r\n              </p>\r\n              <h4\r\n                className=\"mt-3\"\r\n                style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n              >\r\n                Preview\r\n              </h4>\r\n              <p className=\"py-3 px-3 card\">\r\n                {textForm.length > 0\r\n                  ? textForm\r\n                  : \"Enter something in the textbox above to preview it here.\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lowerCase = word.toLowerCase();\r\n    return lowerCase.charAt(0).toUpperCase() + lowerCase.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alertMsg && (\r\n        <div\r\n          className={`alert alert-${props.alertMsg.typ} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alertMsg.typ)}</strong>:{props.alertMsg.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./Components/Alert\";\n// import About from \"./Components/About\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#00A9FC\";\n      showAlert(\"Darkmode has been enabled\",\"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#E4F0FF\";\n      showAlert(\"Lightmode has been enabled\",\"success\")\n    }\n  };\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"Text Formatter\" mode={mode} toggleHandler={toggleMode} />\n      <Alert alertMsg={alert} />\n      <TextForm showAlertHandler={showAlert} titleform=\"Enter the text to analyse below\" mode={mode} />\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>          \n          <Route exact path=\"/\">\n          <TextForm showAlertHandler={showAlert} titleform=\"Enter the text to analyse below\" mode={mode} />\n          </Route>\n        </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}